import cv2
import numpy as np
import matplotlib.pyplot as plt

#Load image
def read_file(Girl):
    img=cv2.imread(Girl)
    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    plt.imshow(img)
    plt.title("Input Image")
    plt.show()
    return img
filename="Girl.jpg"
img=read_file(filename)
input_img=np.copy(img)

#GrayScaled Image
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
gray=cv2.medianBlur(gray,5)
plt.figure(figsize=(10,10))
plt.imshow(gray,cmap="gray")
plt.title("The GrayScaled Image")
plt.show()

#Create Edge Mask
def edge_mask(img,line_size,blur_value):
    gray=cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
    gray_blur=cv2.medianBlur(gray,blur_value)

    edges=cv2.adaptiveThreshold(gray_blur,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,line_size,blur_value)
    return edges
line_size,blur_value=7,7
edges=edge_mask(img,line_size,blur_value)
plt.imshow(edges,cmap="gray")
plt.title("Edged Image")
plt.show()
plt.imshow(edges,cmap="binary")
plt.title("Edged Binary Image")
plt.show()

#Reduce the Color Palette
def color_quantization(img,k):
    data=np.float32(img).reshape((-1,3))
    criteria=(cv2.TERM_CRITERIA_EPS+ cv2.TERM_CRITERIA_MAX_ITER,20,0.001)
    ret,label,center=cv2.kmeans(data,k,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
    center=np.uint8(center)
    result=center[label.flatten()]
    result=result.reshape(img.shape)
    return result
img=color_quantization(img,k=9)
plt.imshow(img)
plt.title("Quantized Image")
plt.show()
#blur the quantized image
blurred=cv2.bilateralFilter(img,d=5,sigmaColor=200,sigmaSpace=200)
plt.imshow(blurred)
plt.title("Blurred Quantized Image")
plt.show()

#cartoonifying an image
def cartoon():
    c=cv2.bitwise_and(blurred,blurred,mask=edges)
    plt.imshow(input_img)
    plt.title("Input image")
    plt.show()
    
    plt.imshow(c)
    plt.title("Cartoonified image")
    plt.show()
cartoon()
    

